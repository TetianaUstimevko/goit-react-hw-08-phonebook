{"version":3,"file":"static/js/182.79bc7cd6.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","../node_modules/nanoid/index.browser.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx","pages/pages.styled.jsx"],"sourcesContent":["export const selectContacts = (state) => state.contacts.list;\nexport const selectFilter = (state) => state.contacts.filter;\nexport const selectLoading = (state) => state.contacts.isLoading;\nexport const selectError = (state) => state.contacts.error;","import styled from '@emotion/styled';\n\nexport const ContactFormStyle = styled.form`\n  background-color: rgb(173, 223, 219);\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  border: 1px solid #000;\n  padding: 20px;\n  border-radius: 4px;\n  border: #202020;\n  box-shadow: rgb(139, 167, 147) -1px -1px 15px,\n    rgb(255, 255, 255) 15px 15px 35px;\n`;\n\nexport const ContactFormLabel = styled.label`\n  margin-bottom: 10px;\n  color: rgb(6, 58, 54);\n  text-shadow: rgb(255, 255, 255) 0px 1px 1px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nexport const ContactFormInput = styled.input`\n  padding: 8px 16px;\n  margin-left: 28px;\n  border-radius: 8px;\n  background-color: rgb(247, 255, 250);\n  box-shadow: rgb(139, 167, 147) 1px 1px 3px inset,\n    rgb(255, 255, 255) -1px -1px 5px inset;\n  /* font-style: italic; */\n  text-shadow: rgb(255, 255, 255) 0px 1px 1px;\n  border: 0px;\n  outline: 0px;\n`;\n\nexport const ContactFormButton = styled.button`\n  padding: 8px 16px;\n  border: none;\n  outline: none;\n  border-radius: 8px;\n  box-shadow: rgba(0, 0, 0, 0.24) 10px 10px 5px 0px;\n  transition: all 0.2s ease-in-out 0s;\n  background-color: rgb(25, 138, 138);\n  color: rgb(255, 255, 255);\n  cursor: pointer;\n`;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\nimport { nanoid } from 'nanoid';\nimport { ContactFormStyle, ContactFormLabel, ContactFormInput, ContactFormButton } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Перевіряю, чи контакт уже існує\n    const existingContact = contacts.find(contact => contact.name === name);\n    if (existingContact) {\n      alert('This contact already exists!');\n      return;\n    }\n\n    const id = nanoid();\n\n    dispatch(addContact({ id, name, number }));\n\n    // Очищаю форму\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ContactFormStyle onSubmit={handleSubmit}>\n      <ContactFormLabel>\n        Name\n        <ContactFormInput\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          type=\"text\"\n          name=\"name\"\n          required\n        />\n      </ContactFormLabel>\n      <ContactFormLabel>\n        Number\n        <ContactFormInput\n          value={number}\n          onChange={(e) => setNumber(e.target.value)}\n          type=\"tel\"\n          name=\"number\"\n          required\n        />\n      </ContactFormLabel>\n\n      <ContactFormButton type=\"submit\">\n        Add contact\n      </ContactFormButton>\n    </ContactFormStyle>\n  );\n};\n\nexport default ContactForm;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from '@emotion/styled';\n\nexport const ContactItemList = styled.li`\n  background-color: #fff;\n  border: 1px solid #000;\n  padding: 10px;\n  border-radius: 4px;\n  margin-bottom: 5px;\n  display: flex;\n  justify-content: space-between;\n  background-color: rgb(229, 252, 250);\n  text-shadow: rgb(255, 255, 255) 0px 1px 1px;\n  border: 0px;\n  outline: 0px;\n`;\n\nexport const ContactItemText = styled.p`\n  margin-right: 30px;\n`;\n\nexport const ContactItemButton = styled.button`\n  border: none;\n  outline: none;\n  border-radius: 8px;\n  box-shadow: rgba(0, 0, 0, 0.24) 10px 10px 5px 0px;\n  transition: all 0.2s ease-in-out 0s;\n  background-color: rgb(25, 138, 138);\n  color: rgb(255, 255, 255);\n  cursor: pointer;\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { ContactItemList, ContactItemText, ContactItemButton } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ContactItemList>\n      <ContactItemText>\n        {name}............\n        {number}\n      </ContactItemText>\n      <ContactItemButton type=\"button\" onClick={handleDelete}>\n        Delete\n      </ContactItemButton>\n    </ContactItemList>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;","import styled from '@emotion/styled';\n\nexport const ContactListStyle = styled.ul`\n  background-color: rgb(173, 223, 219);\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  border: 1px solid #000;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: rgb(139, 167, 147) -1px -1px 15px,\n    rgb(255, 255, 255) 15px 15px 35px;\n  border: 0px;\n  outline: 0px;\n`;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/selectors';\nimport { ContactListStyle } from './ContactList.styled';\n\nconst ContactList = () => {\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filterContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ContactListStyle>\n      {filterContacts.map((contact) => (\n        <ContactItem\n          name={contact.name}\n          number={contact.number}\n          key={contact.id}\n          id={contact.id}\n        \n        />\n      ))}\n    </ContactListStyle>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterContainer = styled.div`\n  margin-bottom: 15px;\n`;\n\nexport const FilterLabel = styled.label`\n  color: rgb(6, 58, 54);\n  text-shadow: rgb(255, 255, 255) 0px 1px 1px;\n`;\n\n\nexport const FilterInput = styled.input`\n    margin-left: 20px;\n  padding: 8px 16px;\n  margin-left: 10px;\n  border-radius: 8px;\n  background-color: rgb(247, 255, 250);\n  box-shadow: rgb(139, 167, 147) 1px 1px 3px inset,\n    rgb(255, 255, 255) -1px -1px 5px inset;\n  text-shadow: rgb(255, 255, 255) 0px 1px 1px;\n  border: 0px;\n  outline: 0px;\n`;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contactsSlice';\nimport { FilterContainer, FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    const filterValue = event.target.value;\n    dispatch(setFilter(filterValue));\n      };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor=\"filter\">Filter contacts:</FilterLabel>\n      <FilterInput type=\"text\" id=\"filter\" onChange={handleChange} />\n    </FilterContainer>\n  );\n};\n\nexport default Filter;","import ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { ContainerStyle, Titleh1, Titleh2 } from \"./pages.styled\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/operations\";\nimport { selectLoading } from \"redux/selectors\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    const Loading = useSelector(selectLoading);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    return (\n        <ContainerStyle>\n            <Titleh1>Phonebook</Titleh1>\n            <ContactForm />\n            {Loading && <p>Loading...</p>}\n            <Titleh2>Contacts</Titleh2>\n            <Filter />\n            <ContactList />\n        </ContainerStyle>\n    );\n}","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Box = styled.div`\n  width: 550px;\n  height: 500px;\n\n  margin-left: auto;\n  margin-right: auto;\n  justify-content: center;\n  display: flex;\n  background-color: rba(255, 255, 255, 0.811);\n  border-radius: 24px;\n`;\n\nexport const ContainerStyle = styled.div`\n  background-color: transparent;\n\n  border-radius: 24px;\n  text-align: center;\n`;\n\nexport const Titleh1 = styled.h1`\n  margin-bottom: 20px;\n  text-transform: uppercase;\n`;\n\nexport const Titleh2 = styled.h2`\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const TitleForm = styled.h1`\n  text-transform: uppercase;\n`;\n\nexport const RegisterForm = styled.form`\n  width: 420px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const LabelForm = styled.label`\n  margin-bottom: 15px;\n  font-weight: 500;\n`;\n\nexport const InputForm = styled.input`\n  width: 300px;\n  height: 30px;\n  margin-left: 12px;\n\n  padding: 8px 12px;\n  font-size: 16px;\n  letter-spacing: 0.15px;\n  outline: none;\n  border: none;\n  background: rgba(0, 0, 0, 0.09);\n  border-radius: 24px;\n`;\n\nexport const ButtonForm = styled.button`\n  width: 250px;\n  height: 30px;\n  margin-left: 30%;\n  margin-bottom: 16px;\n  color: rba(0, 204, 255);\n  background-color: #2e61ec;\n  border: none;\n  border-radius: 24px;\n  cursor: pointer;\n  &:hover {\n    background-color: white;\n    border: none;\n  }\n`;\n\nexport const RegisterText = styled.p`\n  color: #2e61ec;\n  font-size: 20px;\n`;\n\nexport const RegisterLink = styled(NavLink)`\n  color: rgb(218, 27, 52);\n  text-decoration: none;\n  &:hover,\n  &:focus {\n    color: blue;\n    padding: 0 8px;\n    background-color: #c4d0f3;\n    border-radius: 20px;\n  }\n`;\n\nexport const HomeContainer = styled.div`\n  width: 1000px;\n  height: 500px;\n  margin-top: 36px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 24 px;\n  display: flex;\n  background-color: transparent;\n  border-radius: 24px;\n`;\n\nexport const HomeImgBox = styled.div`\n  width: 550px;\n  height: 650px;\n  margin-right: 24px;\n`;\n\nexport const HomeTextBox = styled.div`\n  width: 350px;\n  padding: 20 px;\n`;\n\nexport const HomeText = styled.h1`\n  color: #2e61ec;\n  text-align: center;\n  width: 350px;\n  height: 650px;\n  padding: 16px;\n  padding-top: 72px;\n`;\n\nexport const HomeImg = styled.img`\n  width: 500px;\n  height: 500px;\n  margin-right: 24px;\n`;\n"],"names":["selectContacts","state","contacts","list","selectFilter","filter","selectLoading","isLoading","ContactFormStyle","styled","ContactFormLabel","ContactFormInput","ContactFormButton","dispatch","useDispatch","useSelector","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","find","contact","alert","id","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","addContact","value","onChange","target","type","required","ContactItemList","ContactItemText","ContactItemButton","onClick","deleteContact","ContactListStyle","filterContacts","toLowerCase","includes","map","FilterContainer","FilterLabel","FilterInput","htmlFor","event","filterValue","setFilter","Contacts","Loading","useEffect","fetchContacts","Box","ContainerStyle","Titleh1","Titleh2","TitleForm","RegisterForm","LabelForm","InputForm","ButtonForm","RegisterText","RegisterLink","NavLink","HomeContainer","HomeImgBox","HomeTextBox","HomeText","HomeImg"],"sourceRoot":""}